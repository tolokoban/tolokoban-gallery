{"version":3,"sources":["tfw/color.ts","tfw/theme.ts","page/merging-cells/painter.ts","tfw/debouncer.ts","page/merging-cells/index.tsx","index.tsx"],"names":["Color","codeCSS","arguments","length","undefined","Object","classCallCheck","this","R","G","B","H","S","L","A","parse","input","trim","toUpperCase","parseHexa","call","parseRGB","parseRGBA","parseHSL","luminance","color","hexa2","concat","newColor","chroma","Math","abs","x","shift","min","max","delta","INV6","text","charAt","parseInt","INV15","substr","INV255","isNaN","m","RX_RGB","exec","clamp01","RX_RGBA","parseFloat","RX_HSL","INV359","INV99","hsl2rgb","stringify","luminanceStep","color1","color2","alpha","beta","newRGBA","newRGB","red","green","blue","value","out","floor","toString","tfw_theme","register","registerTheme","apply","name","document","body","THEMES","css","console","error","current","classList","remove","add","get","vars","bg0","makeGetCurrentColor","bg1","bg2","bg3","bgP","bgPD","bgPL","bgS","bgSD","bgSL","black","white","isDark","colorName","$isDark","average","mix","isThemeGloballyDark","varName","setFontSize","size","normalize","completeWithDefaultValues","COLOR","THEME_COLOR_NAMES","themeName","_style","style","forEach","s","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","ALPHA_HEXA","Symbol","iterator","next","done","a","err","return","pen","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","letter","codeVariables","codeBackground","elevationColor","addAlpha","keys","ELEVATIONS","elevationKey","elevation","codeElevation","_loop","depth","tail","fgColorName","bgColorName","styleFgColorName","styleBgColorName","bgClass","fgClass","position","piecesFG","piecesSVG","piecesBG","index","push","pop","join","codeText","styleElement","createElement","getElementsByTagName","appendChild","textContent","0","2","4","6","8","9","10","11","12","16","24","completeBackgrounds","has0","has1","has2","has3","rgb2hsl","darkenBackground","color0","r0","g0","b0","color3","r3","g3","b3","dark","light","rotateHue","bg","hexa","NB_MIN_CELLS","NB_MAX_CELLS","Cell","y","radius","odd","maxRadius","c1","ctx","ringSize","rnd","nbSections","save","translate","strokeStyle","fillStyle","beginPath","moveTo","k","r","ang","PI","lineTo","cos","sin","closePath","fill","stroke","restore","painter","W","clearRect","cells","count","hue","rad","createCells","paint","splice","b","random","MargingCells","props","_this","possibleConstructorReturn","getPrototypeOf","ref","React","createRef","canvas","rect","getBoundingClientRect","width","height","getContext","clientWidth","clientHeight","Painter","_this2","window","addEventListener","action","delay","timer","arg","clearTimeout","setTimeout","Debouncer","react_default","className","Component","Theme","ReactDOM","render","merging_cells_MargingCells","getElementById"],"mappings":"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","file":"static/js/main.437af26b.chunk.js","sourcesContent":["/**\r\n * @class Color\r\n * Fast color manipulations.\r\n * Attributes R  (red), G  (green), B  (blue), A  (alpha), H  (hue), S\r\n * (saturation), and L (luminance) are all floats between 0 and 1.\r\n */\r\nexport default class Color {\r\n    public R: number;\r\n    public G: number;\r\n    public B: number;\r\n    public H: number;\r\n    public S: number;\r\n    public L: number;\r\n    public A: number;\r\n\r\n    constructor(codeCSS: string = \"#000000\") {\r\n        this.R = 0;\r\n        this.G = 0;\r\n        this.B = 0;\r\n        this.H = 0;\r\n        this.S = 0;\r\n        this.L = 0;\r\n        this.A = 1;\r\n\r\n        this.parse(codeCSS);\r\n    }\r\n\r\n    static isValid(codeCSS: string) {\r\n        if( typeof codeCSS !== 'string' ) return false;\r\n        if( codeCSS.charAt(0) !== '#' ) return false;\r\n        switch( codeCSS.length ) {\r\n            case 4:  // #RGB\r\n            case 5:  // #RGBA\r\n            case 7:  // #RRGGBB\r\n            case 9:  // #RRGGBBAA\r\n                return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    static normalize(codeCSS: string) {\r\n        const color = new Color(codeCSS);\r\n        return color.stringify();\r\n    }\r\n\r\n    static luminance(codeCSS: string) {\r\n        const color = new Color(codeCSS);\r\n        return color.luminance();\r\n    }\r\n\r\n    /**\r\n     * Returns 1 for bright colors and 0 for dark colors.\r\n     */\r\n    static luminanceStep(codeCSS: string) {\r\n        const color = new Color(codeCSS);\r\n        return color.luminanceStep();\r\n    }\r\n\r\n    static mix(color1: Color, color2: Color, alpha: number=.5) {\r\n        const beta = 1 - alpha;\r\n        return Color.newRGBA(\r\n            alpha * color2.R + beta * color1.R,\r\n            alpha * color2.G + beta * color1.G,\r\n            alpha * color2.B + beta * color1.B,\r\n            alpha * color2.A + beta * color1.A\r\n        );\r\n    }\r\n\r\n    static newBlack() {\r\n        return Color.newRGB(0, 0, 0);\r\n    }\r\n\r\n    static newWhite() {\r\n        return Color.newRGB(1, 1, 1);\r\n    }\r\n\r\n    /**\r\n     * Create a new Color instance base on R,G,B channels.\r\n     *\r\n     * @param   {number} red - Value between 0 and 1.\r\n     * @param   {number} green - Value between 0 and 1.\r\n     * @param   {number} blue - Value between 0 and 1.\r\n     * @returns {Color} New instance of Color.\r\n     */\r\n    static newRGB(red: number, green: number, blue: number) {\r\n        const color = new Color();\r\n        color.R = red;\r\n        color.G = green;\r\n        color.B = blue;\r\n        color.A = 1;\r\n        return color;\r\n    }\r\n\r\n    /**\r\n     * Create a new Color instance base on R,G,B,A channels.\r\n     *\r\n     * @param   {number} red - Value between 0 and 1.\r\n     * @param   {number} green - Value between 0 and 1.\r\n     * @param   {number} blue - Value between 0 and 1.\r\n     * @param   {number} alpha - Value between 0 and 1.\r\n     * @returns {Color} New instance of Color.\r\n     */\r\n    static newRGBA(red: number, green: number, blue: number, alpha: number) {\r\n        const color = new Color();\r\n        color.R = red;\r\n        color.G = green;\r\n        color.B = blue;\r\n        color.A = alpha;\r\n        return color;\r\n    }\r\n\r\n    /**\r\n     * Parse a color writtent in CSS syntax.\r\n     *\r\n     * @param   {string} code - CSS color.\r\n     * @returns {boolean} `true` if the color has valid syntax.\r\n     */\r\n    parse(code: string = \"#000000\"): boolean {\r\n        const input = code.trim().toUpperCase();\r\n        if (this.parseHexa.call(this, input)) return true;\r\n        if (this.parseRGB.call(this, input)) return true;\r\n        if (this.parseRGBA.call(this, input)) return true;\r\n        if (this.parseHSL.call(this, input)) return true;\r\n        // @TODO parseHSLA.\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @see https://en.wikipedia.org/wiki/Grayscale\r\n     * @this Color\r\n     * @returns {undefined}\r\n     */\r\n    luminance(): number {\r\n        return (0.2126 * this.R) + (0.7152 * this.G) + (0.0722 * this.B);\r\n    }\r\n\r\n    /**\r\n     * @returns {integer} 0 if the color is dark and 1 if it is light.\r\n     */\r\n    luminanceStep(): number {\r\n        return this.luminance() < .6 ? 0 : 1;\r\n    }\r\n\r\n    /**\r\n     * @this Color\r\n     * @returns {string} String value of the color. `#fd45a7`.\r\n     */\r\n    stringify() {\r\n        let color = hexa2(this.R * 255) + hexa2(this.G * 255) + hexa2(this.B * 255);\r\n        if (this.A < 1) {\r\n            color += hexa2(this.A * 255);\r\n        }\r\n        return `#${color}`;\r\n    }\r\n\r\n    copy() {\r\n        const newColor = new Color();\r\n        newColor.R = this.R;\r\n        newColor.G = this.G;\r\n        newColor.B = this.B;\r\n        newColor.A = this.A;\r\n        newColor.H = this.H;\r\n        newColor.S = this.S;\r\n        newColor.L = this.L;\r\n        return newColor;\r\n    }\r\n\r\n    /**\r\n         * @see https://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\r\n         * @this Color\r\n         * @returns {undefined}\r\n         */\r\n    hsl2rgb() {\r\n        const\r\n            H = 6 * this.H,\r\n            S = this.S,\r\n            L = this.L,\r\n            chroma = (1 - Math.abs(2 * L - 1)) * S,\r\n            x = chroma * (1 - Math.abs(H % 2 - 1));\r\n\r\n        let R = 0, G = 0, B = 0;\r\n\r\n        if (H < 3) {\r\n            if (H < 1) {\r\n                R = chroma; G = x; B = 0;\r\n            } else if (H < 2) {\r\n                R = x; G = chroma; B = 0;\r\n            } else {\r\n                // H == 2.\r\n                R = 0; G = chroma; B = x;\r\n            }\r\n        } else if (H < 4) {\r\n            R = 0; G = x; B = chroma;\r\n        } else if (H < 5) {\r\n            R = x; G = 0; B = chroma;\r\n        } else {\r\n            R = chroma; G = 0; B = x;\r\n        }\r\n\r\n        const shift = L - chroma * 0.5;\r\n        this.R = R + shift;\r\n        this.G = G + shift;\r\n        this.B = B + shift;\r\n    }\r\n\r\n    rgb2hsl() {\r\n        const R = this.R;\r\n        const G = this.G;\r\n        const B = this.B;\r\n\r\n        const min = Math.min(R, G, B);\r\n        const max = Math.max(R, G, B);\r\n        const delta = max - min;\r\n\r\n        this.L = 0.5 * (max + min);\r\n\r\n        if (delta < 0.000001) {\r\n            this.H = 0;\r\n            this.S = 0;\r\n        }\r\n        else {\r\n            this.S = delta / (1 - Math.abs(2 * this.L - 1));\r\n            if (max === R) {\r\n                if (G >= B) {\r\n                    this.H = INV6 * ((G - B) / delta);\r\n                } else {\r\n                    this.H = 1 - INV6 * ((B - G) / delta);\r\n                }\r\n            }\r\n            else if (max === G) {\r\n                this.H = INV6 * (2 + (B - R) / delta);\r\n            }\r\n            else {\r\n                this.H = INV6 * (4 + (R - G) / delta);\r\n            }\r\n        }\r\n    }\r\n\r\n    private parseHexa(text: string) {\r\n        if (text.charAt(0) !== '#') return false;\r\n        let R = 0, G = 0, B = 0, A = 1;\r\n\r\n        switch (text.length) {\r\n            case 4:\r\n                R = parseInt(text.charAt(1), 16) * INV15;\r\n                G = parseInt(text.charAt(2), 16) * INV15;\r\n                B = parseInt(text.charAt(3), 16) * INV15;\r\n                break;\r\n            case 5:\r\n                R = parseInt(text.charAt(1), 16) * INV15;\r\n                G = parseInt(text.charAt(2), 16) * INV15;\r\n                B = parseInt(text.charAt(3), 16) * INV15;\r\n                A = parseInt(text.charAt(4), 16) * INV15;\r\n                break;\r\n            case 7:\r\n                R = parseInt(text.substr(1, 2), 16) * INV255;\r\n                G = parseInt(text.substr(3, 2), 16) * INV255;\r\n                B = parseInt(text.substr(5, 2), 16) * INV255;\r\n                break;\r\n            case 9:\r\n                R = parseInt(text.substr(1, 2), 16) * INV255;\r\n                G = parseInt(text.substr(3, 2), 16) * INV255;\r\n                B = parseInt(text.substr(5, 2), 16) * INV255;\r\n                A = parseInt(text.substr(7, 2), 16) * INV255;\r\n                break;\r\n            default:\r\n        }\r\n\r\n        if (isNaN(R) || isNaN(G) || isNaN(B) || isNaN(A)) {\r\n            this.R = this.G = this.B = this.A = 0;\r\n        } else {\r\n            this.R = R;\r\n            this.G = G;\r\n            this.B = B;\r\n            this.A = A;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param   {string} text - `rgb(200, 140, 50)`\r\n     * @returns {boolean} `true` if `text` is a valid `rgb()` syntax.\r\n     */\r\n    private parseRGB(text: string) {\r\n        const m = RX_RGB.exec(text);\r\n        if (!m) return false;\r\n        this.R = clamp01(parseInt(m[1], 10) * INV255);\r\n        this.G = clamp01(parseInt(m[2], 10) * INV255);\r\n        this.B = clamp01(parseInt(m[3], 10) * INV255);\r\n        this.A = 1;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param   {string} text - `rgba(200, 140, 50, 0.5)`\r\n     * @returns {boolean} `true` if `text` is a valid `rgba()` syntax.\r\n     */\r\n    private parseRGBA(text: string) {\r\n        const m = RX_RGBA.exec(text);\r\n        if (!m) return false;\r\n        this.R = clamp01(parseInt(m[1], 10) * INV255);\r\n        this.G = clamp01(parseInt(m[2], 10) * INV255);\r\n        this.B = clamp01(parseInt(m[3], 10) * INV255);\r\n        this.A = clamp01(parseFloat(m[4]));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param   {string} text - `hsl(200, 140, 50)`\r\n     * @returns {boolean} `true` if `text` is a valid `hsl()` syntax.\r\n     */\r\n    private parseHSL(text: string) {\r\n        const m = RX_HSL.exec(text);\r\n        if (!m) return false;\r\n        this.H = clamp01(parseInt(m[1], 10) * INV359);\r\n        this.S = clamp01(parseInt(m[2], 10) * INV99);\r\n        this.L = clamp01(parseInt(m[3], 10) * INV99);\r\n        this.A = 1;\r\n        this.hsl2rgb();\r\n        return true;\r\n    }\r\n}\r\n\r\nconst\r\n    INV6 = 1 / 6,\r\n    INV15 = 1 / 15,\r\n    INV99 = 1 / 99,\r\n    INV255 = 1 / 255,\r\n    INV359 = 1 / 359;\r\n\r\nconst RX_RGB = /^RGB[\\s\\(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)/;\r\nconst RX_RGBA = /^RGBA[\\s\\(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9\\.]+([0-9\\.]+)/;\r\nconst RX_HSL = /^HSL[\\s\\(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)/;\r\n\r\nfunction clamp01(value: number): number {\r\n    if (value < 0) return 0;\r\n    if (value > 1) return 1;\r\n    return value;\r\n}\r\n\r\nfunction hexa2(value: number) {\r\n    let out = Math.floor(value).toString(16);\r\n    if (out.length < 2) out = \"0\" + out;\r\n    return out;\r\n}\r\n","/**\n * Manage CSS styles.\n */\nexport default {\n    register: registerTheme,\n    apply: applyTheme,\n    get: getTheme,\n    bg0: makeGetCurrentColor(\"bg0\"),\n    bg1: makeGetCurrentColor(\"bg1\"),\n    bg2: makeGetCurrentColor(\"bg2\"),\n    bg3: makeGetCurrentColor(\"bg3\"),\n    bgP: makeGetCurrentColor(\"bgP\"),\n    bgPD: makeGetCurrentColor(\"bgPD\"),\n    bgPL: makeGetCurrentColor(\"bgPL\"),\n    bgS: makeGetCurrentColor(\"bgS\"),\n    bgSD: makeGetCurrentColor(\"bgSD\"),\n    bgSL: makeGetCurrentColor(\"bgSL\"),\n    black: makeGetCurrentColor(\"black\"),\n    white: makeGetCurrentColor(\"white\"),\n    isDark,\n    setFontSize,\n    normalize: completeWithDefaultValues\n};\n\ninterface IStyle {\n    bg0?: string;\n    bg1?: string;\n    bg2?: string;\n    bg3?: string;\n    bgP?: string;\n    bgPD?: string;\n    bgPL?: string;\n    bgS?: string;\n    bgSD?: string;\n    bgSL?: string;\n    fg0?: string;\n    fg1?: string;\n    fg2?: string;\n    fg3?: string;\n    fgP?: string;\n    fgPD?: string;\n    fgPL?: string;\n    fgS?: string;\n    fgSD?: string;\n    fgSL?: string;\n    black?: string;\n    white?: string;\n    [key: string]: string | undefined;\n};\n\ninterface ITheme {\n    bg0: string,\n    bg1: string,\n    bg2: string,\n    bg3: string,\n    bgP: string,\n    bgPL: string,\n    bgPD: string,\n    bgS: string,\n    bgSL: string,\n    bgSD: string,\n    black: string,\n    white: string\n}\n\n\n//################################################################################\n\nimport \"./theme.css\"\nimport Color from \"./color\"\n\ninterface IThemes {\n    css: { [name: string]: HTMLStyleElement };\n    vars: { [name: string]: IStyle }\n    current: string | null;\n}\n\n// Used for luminance computations. Because we need to know which text color\n// can be used based on the background's luminance.\nconst COLOR = new Color();\n\nconst THEME_COLOR_NAMES = [\"0\", \"1\", \"2\", \"3\", \"P\", \"PD\", \"PL\", \"S\", \"SD\", \"SL\"];\nconst THEMES: IThemes = {\n    css: {},\n    vars: {},\n    current: null\n};\n\nfunction registerTheme(themeName: string, _style: IStyle) {\n    const style = completeWithDefaultValues(_style);\n    THEMES.vars[themeName] = style;\n\n    let codeCSS = codeVariables(themeName, style);\n    codeCSS += codeBackground(themeName, style);\n    codeCSS += codeElevation(themeName, style);\n    codeCSS += codeText(themeName, style);\n\n    let styleElement = THEMES.css[themeName];\n    if (!styleElement) {\n        styleElement = document.createElement(\"style\");\n        document.getElementsByTagName('head')[0].appendChild(styleElement);\n        THEMES.css[themeName] = styleElement;\n    }\n\n    styleElement.textContent = codeCSS;\n}\n\nfunction codeText(themeName: string, style: IStyle) {\n    let codeCSS = '';\n    for (let depth = 1; depth <= 10; depth++) {\n        THEME_COLOR_NAMES.forEach(function(colorName) {\n            const fgColorName = `fg${colorName}`;\n            const bgColorName = `bg${colorName}`;\n            const styleFgColorName: string = style[fgColorName] as string;\n            const styleBgColorName: string = style[bgColorName] as string;\n            const bgClass = \".thm-bg\" + colorName;\n            const fgClass = \".thm-fg\" + colorName;\n            for (let position = 1; position <= depth; position++) {\n                const piecesFG = [];\n                const piecesSVG = [];\n                const piecesBG = [];\n                for (let index = 1; index <= depth; index++) {\n                    piecesBG.push(position === index ? bgClass : '*');\n                    piecesSVG.push(position === index ? bgClass : '*');\n                    piecesFG.push(position === index ? fgClass : '*');\n                    if (index === depth) {\n                        piecesBG.push(piecesBG.pop() + \".thm-fg\");\n                        piecesFG.push(piecesFG.pop() + fgClass);\n                    }\n                }\n                codeCSS += \"body.dom-theme-\" + themeName + \" \"\n                    + piecesBG.join(\" > \")\n                    + \" { color: \" + styleFgColorName + \" }\\n\";\n                codeCSS += \"body.dom-theme-\" + themeName + \" \"\n                    + removeTail(piecesBG.join(\" > \"), \".thm-fg\")\n                    + \" { color: \" + styleFgColorName + \" }\\n\";\n                codeCSS += \"body.dom-theme-\" + themeName + \" \"\n                    + piecesFG.join(\" > \")\n                    + \" { color: \" + styleBgColorName + \" }\\n\";\n                codeCSS += \"body.dom-theme-\" + themeName + \" \"\n                    + piecesSVG.join(\" > \")\n                    + \" .thm-svg-fill0\"\n                    + \" { fill: \" + styleFgColorName + \" }\\n\";\n                codeCSS += \"body.dom-theme-\" + themeName + \" \"\n                    + piecesSVG.join(\" > \")\n                    + \" .thm-svg-stroke0\"\n                    + \" { stroke: \" + styleFgColorName + \" }\\n\";\n            }\n        });\n    }\n    return codeCSS;\n}\n\nconst ALPHA_HEXA = \"123456789ABCDE\";\nfunction codeVariables(themeName: string, style: IStyle) {\n    let codeCSS = \"body.dom-theme-\" + themeName + '{\\n';\n    THEME_COLOR_NAMES.forEach(function(colorName) {\n        const s = style[`bg${colorName}`] as string;\n        codeCSS += `  --thm-bg${colorName}: ${s};\\n`;\n        for (const a of ALPHA_HEXA) {\n            codeCSS += `  --thm-bg${colorName}-${a}: ${s}${a}${a};\\n`;\n        }\n        COLOR.parse(s);\n        const pen = COLOR.luminanceStep() ? style.black : style.white;\n        codeCSS += `  --thm-fg${colorName}: ${pen};\\n`;\n        for (const a of ALPHA_HEXA) {\n            codeCSS += `  --thm-fg${colorName}-${a}: ${pen}${a}${a};\\n`;\n        }\n    });\n    style.white = normalize(style.white);\n    style.black = normalize(style.black);\n    codeCSS += `  --thm-white: ${style.white};\\n`;\n    codeCSS += `  --thm-black: ${style.black};\\n`;\n    for (const letter of ALPHA_HEXA) {\n        codeCSS += `  --thm-white-${letter}: ${style.white}${letter}${letter};\\n`;\n        codeCSS += `  --thm-black-${letter}: ${style.black}${letter}${letter};\\n`;\n    }\n    codeCSS += \"}\\n\";\n    return codeCSS;\n}\n\n\nfunction codeBackground(themeName: string, style: IStyle) {\n    var codeCSS = '';\n    THEME_COLOR_NAMES.forEach(function(colorName) {\n        codeCSS += \"body.dom-theme-\" + themeName + \".thm-bg\" + colorName\n            + \" { background-color: \" + style[`bg${colorName}`] + \" }\\n\";\n        codeCSS += \"body.dom-theme-\" + themeName + \" .thm-fg\" + colorName\n            + \" { color: \" + style[`fg${colorName}`] + \" }\\n\";\n        codeCSS += \"body.dom-theme-\" + themeName + \" .thm-bg\" + colorName\n            + \" { background-color: \" + style[`bg${colorName}`] + \" }\\n\";\n        codeCSS += \"body.dom-theme-\" + themeName + \" .thm-bg\" + colorName + \"-bottom\"\n            + \" { background: linear-gradient(to top,\"\n            + style[`bg${colorName}`] + \",transparent) }\\n\";\n        codeCSS += \"body.dom-theme-\" + themeName + \" .thm-bg\" + colorName + \"-top\"\n            + \" { background: linear-gradient(to bottom,\"\n            + style[`bg${colorName}`] + \",transparent) }\\n\";\n        codeCSS += \"body.dom-theme-\" + themeName + \" .thm-bg\" + colorName + \"-left\"\n            + \" { background: linear-gradient(to right,\"\n            + style[`bg${colorName}`] + \",transparent) }\\n\";\n        codeCSS += \"body.dom-theme-\" + themeName + \" .thm-bg\" + colorName + \"-right\"\n            + \" { background: linear-gradient(to left,\"\n            + style[`bg${colorName}`] + \",transparent) }\\n\";\n\n        if (!isNaN(parseInt(colorName))) return;\n        codeCSS += \"body.dom-theme-\" + themeName + \" .thm-svg-fill\" + colorName\n            + \" { fill: \"\n            + style[`bg${colorName}`] + \" }\\n\";\n        codeCSS += \"body.dom-theme-\" + themeName + \" .thm-svg-stroke\" + colorName\n            + \" { stroke: \"\n            + style[`bg${colorName}`] + \" }\\n\";\n    });\n    return codeCSS;\n}\n\nconst ELEVATIONS: { [ele: string]: string[] } = {\n    \"0\": [\"none\"],\n    \"2\": [\"button\", \"card\"],\n    \"4\": [\"bar\"],\n    \"6\": [\"floating\"],\n    \"8\": [\"button:active\", \"button-raised\", \"card-raised\"],\n    \"9\": [\"sunmenu-0\"],\n    \"10\": [\"sunmenu-1\"],\n    \"11\": [\"sunmenu-2\"],\n    \"12\": [\"floating:active\"],\n    \"16\": [\"nav\"],\n    \"24\": [\"dialog\"]\n};\nfunction codeElevation(themeName: string, style: IStyle) {\n    COLOR.parse(style.bg2);\n    const luminance = COLOR.luminance();\n    var elevationColor = luminance < .6\n        ? addAlpha(style.white, 4)\n        : addAlpha(style.black, 6);\n    var codeCSS = '';\n    const elevationKeys = Object.keys(ELEVATIONS);\n    elevationKeys.forEach(function(elevationKey) {\n        const elevation = parseInt(elevationKey, 10);\n        ELEVATIONS[elevationKey].forEach(name => {\n            codeCSS += `body.dom-theme-${themeName} .thm-ele-${name} {\n  box-shadow: 0 ${elevation}px ${2 * elevation}px ${elevationColor}\n}\\n`;\n        })\n    });\n    return codeCSS;\n}\n\nfunction applyTheme(name: string, target: HTMLElement = document.body) {\n    if (!THEMES.css[name]) {\n        console.error(\"This theme has not been registered: \", name);\n        return;\n    }\n    var body = document.body;\n    if (typeof THEMES.current === 'string') {\n        body.classList.remove(`dom-theme-${THEMES.current}`);\n    }\n    THEMES.current = name;\n    body.classList.add(`dom-theme-${THEMES.current}`);\n}\n\nfunction getTheme(name: string = \"default\"): ITheme {\n    return THEMES.vars[name] as ITheme;\n}\n\nfunction completeBackgrounds(style: IStyle) {\n    let has0 = typeof style.bg0 === 'string';\n    const has1 = typeof style.bg1 === 'string';\n    const has2 = typeof style.bg2 === 'string';\n    let has3 = typeof style.bg3 === 'string';\n\n    if (has0 && has1 && has2 && has3) return\n\n    if (!has0 && !has1 && !has2 && !has3) {\n        style.bg0 = \"#E0E0E0\";\n        style.bg1 = \"#F5F5F5\";\n        style.bg2 = \"#FAFAFA\";\n        style.bg3 = \"#FFF\";\n        return;\n    }\n    if (has0 && !has1 && !has2 && !has3) {\n        style.bg3 = lightenBackground(style.bg0 as string);\n        has3 = true;\n    }\n    if (!has0 && !has1 && !has2 && has3) {\n        style.bg0 = darkenBackground(style.bg3 as string);\n        has3 = true;\n    }\n    const color0 = new Color(style.bg0);\n    const r0 = color0.R;\n    const g0 = color0.G;\n    const b0 = color0.B;\n    const color3 = new Color(style.bg3);\n    const r3 = color3.R;\n    const g3 = color3.G;\n    const b3 = color3.B;\n    const color1 = Color.newRGB((2 * r0 + r3) / 3, (2 * g0 + g3) / 3, (2 * b0 + b3) / 3);\n    const color2 = Color.newRGB((r0 + 2 * r3) / 3, (g0 + 2 * g3) / 3, (b0 + 2 * b3) / 3);\n    style.bg1 = color1.stringify();\n    style.bg2 = color2.stringify();\n}\n\nfunction completeWithDefaultValues(style: IStyle) {\n    if (typeof style === 'undefined') style = {};\n\n    completeBackgrounds(style);\n\n    if (typeof style.bgP !== 'string') style.bgP = \"#3E50B4\";\n    if (typeof style.bgPD !== 'string') style.bgPD = dark(style.bgP);\n    if (typeof style.bgPL !== 'string') style.bgPL = light(style.bgP);\n    if (typeof style.bgS !== 'string') style.bgS = rotateHue(style.bgP);\n    if (typeof style.bgSD !== 'string') style.bgSD = dark(style.bgS);\n    if (typeof style.bgSL !== 'string') style.bgSL = light(style.bgS);\n\n    if (typeof style.white !== 'string') style.white = '#fff';\n    if (typeof style.black !== 'string') style.black = '#000';\n\n    THEME_COLOR_NAMES.forEach(function(name) {\n        const bg: string = style[`bg${name}`] || '#000';\n        COLOR.parse(bg);\n        var luminance = COLOR.luminance();\n        style[`fg${name}`] = luminance < .6 ? style.white : style.black;\n    });\n\n    return style;\n}\n\nfunction dark(color: string) {\n    const percent = .25;\n    COLOR.parse(color);\n    COLOR.rgb2hsl();\n    COLOR.L *= 1 - percent;\n    COLOR.hsl2rgb();\n    return COLOR.stringify();\n}\n\nfunction darkenBackground(color: string) {\n    COLOR.parse(color);\n    COLOR.rgb2hsl();\n    COLOR.L = Math.max(0, COLOR.L - 0.15);\n    COLOR.hsl2rgb();\n    return COLOR.stringify();\n}\n\nfunction light(color: string) {\n    var percent = .4;\n    COLOR.parse(color);\n    COLOR.rgb2hsl();\n    COLOR.L = percent + (1 - percent) * COLOR.L;\n    COLOR.hsl2rgb();\n    return COLOR.stringify();\n}\n\nfunction lightenBackground(color: string) {\n    COLOR.parse(color);\n    COLOR.rgb2hsl();\n    COLOR.L = Math.min(1, COLOR.L + 0.3);\n    COLOR.hsl2rgb();\n    return COLOR.stringify();\n}\n\nfunction rotateHue(color: string): string {\n    COLOR.parse(color);\n    COLOR.rgb2hsl();\n    COLOR.H = COLOR.H + .5;\n    if (COLOR.H > 1) COLOR.H--;\n    COLOR.hsl2rgb();\n    return COLOR.stringify();\n}\n\n/**\n * @param {string} color - RGB color in format #xxx or #xxxxxx.\n * @param {string} alpha - Single char between 0 and F.\n */\nfunction addAlpha(color: string, alpha: string) {\n    if (color.length < 5) return color + alpha;\n    return color + alpha + alpha;\n}\n\nfunction removeTail(text: string, tail: string) {\n    return text.substr(0, text.length - tail.length);\n}\n\nfunction isDark(colorName: string = \"\"): boolean {\n    if (colorName === \"\") return isThemeGloballyDark();\n\n    const vars = THEMES.vars[THEMES.current || \"default\"];\n    const varName = `$isDark/${colorName}`;\n    let isDark = vars[varName];\n    if (typeof isDark === 'boolean') return isDark;\n\n    const color = new Color(vars[colorName]);\n    vars[varName] = !color.luminanceStep();\n    return vars[varName];\n}\n\nfunction isThemeGloballyDark(): boolean {\n    const vars = THEMES.vars[THEMES.current || \"default\"];\n    let isDark = vars.$isDark;\n    if (typeof isDark === 'boolean') return isDark;\n\n    const bg0 = new Color(vars.bg0);\n    const bg1 = new Color(vars.bg1);\n    const bg2 = new Color(vars.bg2);\n    const bg3 = new Color(vars.bg3);\n    const average = Color.mix(\n        Color.mix(bg0, bg1),\n        Color.mix(bg2, bg3)\n    );\n    vars.$isDark = !average.luminanceStep();\n    return vars.$isDark;\n}\n\nfunction makeGetCurrentColor(colorName: string): () => string {\n    return () => THEMES.vars[THEMES.current || \"default\"][colorName];\n}\n\nfunction setFontSize(size: \"small\" | \"medium\" | \"large \") {\n    document.body.classList.add(`thm-font-size-${size}`);\n}\n\nfunction normalize(hexa: string): string {\n    const color = new Color(hexa);\n    return color.stringify();\n}\n\nregisterTheme(\"default\", { bgP: \"#1e90ff\" });\n","import Color from \"../../tfw/color\"\r\n\r\nconst NB_MIN_CELLS = 11;\r\nconst NB_MAX_CELLS = 29;\r\nconst RING_SIZE = 25;\r\n\r\nclass Cell {\r\n    private odd: boolean = false;\r\n    private readonly color2: string;\r\n    private readonly maxRadius: number;\r\n\r\n    constructor(private x: number, private y: number,\r\n        private radius: number, private color: string) {\r\n        this.maxRadius = radius;\r\n        // The second color is 10% darker.\r\n        const c1 = new Color(color);\r\n        c1.rgb2hsl();\r\n        c1.L = Math.max(0, c1.L - 0.025);\r\n        c1.hsl2rgb();\r\n        this.color2 = c1.stringify();\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, ringSize: number) {\r\n        const radius = this.radius;\r\n        if (radius < ringSize) return false;\r\n        this.radius -= ringSize * rnd(0.99, 1.001) * (this.odd ? 0.5 : 1);\r\n        this.odd = !this.odd;\r\n\r\n        const nbSections = radius;\r\n\r\n        ctx.save();\r\n        ctx.translate(this.x, this.y);\r\n        ctx.strokeStyle = \"#00000055\";\r\n        const color = new Color(this.odd ? this.color : this.color2);\r\n        const light = 1.0 - 0.9 * radius / this.maxRadius;\r\n        color.R *= light;\r\n        color.G *= light;\r\n        color.B *= light;\r\n        ctx.fillStyle = color.stringify();\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(radius, 0);\r\n        for (let k = 1; k < nbSections; k++) {\r\n            const r = radius + ringSize * (rnd(0.1) - 0.05);\r\n            const ang = 2 * Math.PI * k / nbSections;\r\n            ctx.lineTo(\r\n                Math.cos(ang) * r,\r\n                Math.sin(ang) * r\r\n            );\r\n        }\r\n\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default {\r\n    paint: (ctx: CanvasRenderingContext2D, W: number, H: number) => {\r\n        ctx.clearRect(0, 0, W, H);\r\n        const cells = createCells(W, H);\r\n        const ringSize = RING_SIZE * Math.min(W, H) * .001;\r\n        while (cells.length > 0) {\r\n            const index = Math.floor(rnd(cells.length));\r\n            const cell = cells[index];\r\n            if (!cell.paint(ctx, ringSize)) {\r\n                cells.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction createCells(W: number, H: number): Cell[] {\r\n    const cells = [];\r\n    const radius = Math.min(W, H);\r\n    const count = Math.floor(rnd(NB_MIN_CELLS, NB_MAX_CELLS));\r\n    const hue = rnd(1);\r\n    const color = new Color();\r\n    for (let k = 0; k < count; k++) {\r\n        const ang = Math.PI * 2 * k / count;\r\n        const rad = rnd(0.3, 1);\r\n        color.H = hue + k / count;\r\n        while (color.H > 1) color.H -= 1;\r\n        color.S = 0.6;\r\n        color.L = 0.8;\r\n        color.hsl2rgb();\r\n        cells.push(new Cell(\r\n            rad * W * Math.cos(ang) + W / 2,\r\n            rad * H * Math.sin(ang) + H / 2,\r\n            radius, color.stringify()\r\n        ));\r\n    }\r\n\r\n    return cells;\r\n}\r\n\r\n\r\nfunction rnd(a: number, b: number | null = null): number {\r\n    const min = b === null ? 0 : a;\r\n    const max = b === null ? a : b;\r\n    return min + Math.random() * (max - min);\r\n}\r\n","type Action<T> = (arg: T) => void;\r\ntype Debouncer<T> = (arg: T) => void;\r\n\r\n/**\r\n * @param {function} action -  Action to call. Two consecutive actions cannot be  called if there is\r\n * less than `delay` ms between them.\r\n * @param {number} delay - Number of milliseconds.\r\n * @returns {function} The function to call as much as you want. It will perform the debouce for you.\r\n * Put in the same args as the `action` function.\r\n */\r\nexport default function <T>(action: Action<T>, delay: number): Debouncer<T> {\r\n    let timer: number = 0;\r\n\r\n    return function(this: { delay: number }, arg: T) {\r\n        if (timer) window.clearTimeout(timer);\r\n        timer = window.setTimeout(() => {\r\n            timer = 0;\r\n            action(arg);\r\n        }, delay) as number;\r\n    }\r\n}\r\n","import React from \"react\"\r\nimport Painter from \"./painter\"\r\nimport Debouncer from \"../../tfw/debouncer\"\r\n\r\nimport \"./merging-cells.css\"\r\n\r\ninterface IMargingCellsProps {\r\n\r\n}\r\n\r\nexport default class MargingCells extends React.Component<IMargingCellsProps, {}> {\r\n    private readonly ref: React.RefObject<HTMLCanvasElement> = React.createRef();\r\n\r\n    constructor( props: IMargingCellsProps ) {\r\n        super( props );\r\n    }\r\n\r\n    private getContext() {\r\n        const canvas = this.ref.current;\r\n        if( !canvas ) return null;\r\n        const rect = canvas.getBoundingClientRect();\r\n        canvas.width = rect.width;\r\n        canvas.height = rect.height;\r\n        return canvas.getContext(\"2d\");\r\n    }\r\n\r\n    private paint() {\r\n        const ctx = this.getContext();\r\n        if( !ctx ) return;\r\n        const W = ctx.canvas.clientWidth;\r\n        const H = ctx.canvas.clientHeight;\r\n        Painter.paint(ctx, W, H);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.paint();\r\n        window.addEventListener(\"resize\", Debouncer(() => this.paint(), 300));\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"page-MergingCells\">\r\n            <canvas ref={this.ref} className=\"canvas\"></canvas>\r\n        </div>)\r\n    }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from 'react-dom'\nimport Theme from \"./tfw/theme\"\nimport MergingCells from \"./page/merging-cells\"\n\nimport \"./tfw/font/josefin.css\"\nimport \"./index.css\"\n\nTheme.apply(\"default\");\n\n    ReactDOM.render(\n        <MergingCells/>,\n        document.getElementById(\"root\"));\n\n/*\nif (location.hash !== \"#packs\") {\n    location.hash = \"#packs\";\n}\n\nwindow.addEventListener(\"hashchange\", () => {\n    const hash = location.hash;\n    console.info(\"hash=\", hash);\n    const page = hash.length < 2 ? \"packs\" : hash.substr(1);\n    State.dispatch(State.Current.setPage(page));\n}, false);\n*/\n"],"sourceRoot":""}